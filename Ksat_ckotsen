import csv
import time
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import curve_fit

def read_csv_and_build_wff(file_name):
    wff_list = []  # List of all problems and their clauses
    current_problem = {}
    current_clauses = []  # Clauses for the current problem

    with open(file_name, mode='r', encoding='utf-8-sig') as file:
        csv_reader = csv.reader(file)

        for row in csv_reader:
            cleaned_row = [item for item in row if item.strip()]  # Remove empties
            if not cleaned_row:
                continue  # Skip empty rows

            # Skip comments (rows starting with 'c')
            if cleaned_row[0].startswith('c'):
                if current_clauses:
                    wff_list.append((current_problem, current_clauses))
                    current_problem = {}  # Reset for the next problem
                    current_clauses = []  # Reset the clause list
                continue

            elif cleaned_row[0] == 'p':
                current_problem['problem_number'] = len(wff_list) + 1  # Problem number is incremental
                continue  # Skip further processing for this line

            else:
                clause = list(map(int, cleaned_row[:-1]))  # Convert literals to integers, skip trailing '0'
                current_clauses.append(clause)

    if current_clauses:
        wff_list.append((current_problem, current_clauses))

    return wff_list

def find_unit_clause(clauses):
    for clause in clauses:
        if len(clause) == 1:  # Check for unit clause
            return clause[0]
    return None  # No unit clause found

def unit_propagate(literal, clauses):
    new_wff = []
    for clause in clauses:
        if literal in clause:  # Clause is satisfied, so skip
            continue
        new_clause = [l for l in clause if l != -literal]  # Remove negation of current literal
        if len(new_clause) == 0:  # If empty clause, a conflict is found
            return None
        new_wff.append(new_clause)
    return new_wff  # Return the updated WFF after propagation

def find_pure_literals(clauses):
    all_literals = set(lit for clause in clauses for lit in clause)  # Gather all literals
    pure_literals = [lit for lit in all_literals if -lit not in all_literals]  # Filter pure literals
    return pure_literals

def pure_literal_assign(literal, clauses):
    return unit_propagate(literal, clauses)  # Propagate literal assignments

def choose_literal(clauses):
    # Choose first literal (since clauses are modified as the algorithm progresses)
    return clauses[0][0] if clauses else None

def dpll(clauses, assignment):
    unit = find_unit_clause(clauses)
    while unit:  # Unit propagation
        clauses = unit_propagate(unit, clauses)
        if clauses is None:  # Conflict detected
            return False
        assignment[abs(unit)] = unit > 0  # Add the assignment
        unit = find_unit_clause(clauses)

    if not clauses:  # All clauses satisfied
        return True

    pure_literals = find_pure_literals(clauses)
    for lit in pure_literals:
        clauses = pure_literal_assign(lit, clauses)
        assignment[abs(lit)] = lit > 0

    if not clauses:
        return True

    chosen_literal = choose_literal(clauses)
    if not chosen_literal:
        return False

    new_clauses = unit_propagate(chosen_literal, clauses)
    if new_clauses and dpll(new_clauses, {**assignment, abs(chosen_literal): chosen_literal > 0}):
        return True

    new_clauses = unit_propagate(-chosen_literal, clauses)
    if new_clauses:
        return dpll(new_clauses, {**assignment, abs(chosen_literal): chosen_literal < 0})

    return False

# Polynomial fit function (quadratic)
def polynomial_fit(x, a, b, c):
    return a * x**2 + b * x + c

# Main function to read, solve, write output, and plot the results
def main(file_name):
    # Read the WFFs from the CSV file
    wff_problems = read_csv_and_build_wff(file_name)

    problem_sizes = []
    solve_times = []
    satisfiable_problems = []  # List to track if a problem is satisfiable (True) or not (False)
    count = 0
    for problem in wff_problems:
        clauses = problem[1]  # The second item is the clause list
        problem_size = len(clauses)
        problem_sizes.append(problem_size)

        start_time = time.time()
        assignment = {}

        if dpll(clauses, assignment):
            satisfiable_problems.append(True)  # Problem is satisfiable
            count += 1
        else:
            satisfiable_problems.append(False)  # Problem is unsatisfiable

        end_time = time.time()
        solve_times.append(end_time - start_time)

    # Separate the problems into satisfiable and unsatisfiable sets for plotting
    satisfiable_sizes = [problem_sizes[i] for i in range(len(satisfiable_problems)) if satisfiable_problems[i]]
    satisfiable_times = [solve_times[i] for i in range(len(satisfiable_problems)) if satisfiable_problems[i]]

    unsatisfiable_sizes = [problem_sizes[i] for i in range(len(satisfiable_problems)) if not satisfiable_problems[i]]
    unsatisfiable_times = [solve_times[i] for i in range(len(satisfiable_problems)) if not satisfiable_problems[i]]

    # Convert lists to numpy arrays for curve fitting
    problem_sizes_np = np.array(problem_sizes)
    solve_times_np = np.array(solve_times)

    # Fit a polynomial (quadratic) curve to the data (bounding curve for worst-case time complexity)
    popt, _ = curve_fit(polynomial_fit, problem_sizes_np, solve_times_np)

    # Generate the fitted curve data
    fit_x = np.linspace(min(problem_sizes_np), max(problem_sizes_np), 100)
    fit_y = polynomial_fit(fit_x, *popt)

    # Plotting
    plt.figure(figsize=(10, 6))

    # Plot the actual data points for satisfiable and unsatisfiable problems
    plt.scatter(satisfiable_sizes, satisfiable_times, color='green', label='Satisfiable (True)', marker='o')
    plt.scatter(unsatisfiable_sizes, unsatisfiable_times, color='red', label='Unsatisfiable (False)', marker='x')

    # Plot the fitted bounding curve
    plt.plot(fit_x, fit_y, color='blue', label=f'Bounding Curve: $y = {popt[0]:.4e}x^2 + {popt[1]:.4e}x + {popt[2]:.4e}$', linestyle='--')

    # Add titles and labels
    plt.title('Time vs Problem Size with Satisfiable/Unsatisfiable Points')
    plt.xlabel('Problem Size (Number of Clauses)')
    plt.ylabel('Time Taken (seconds)')
    plt.grid(True)

    # Add legend
    plt.legend()

    # Show the plot
    plt.show()

    print(f"Number of satisfiable problems: {count}")
    print(f"Fitted bounding curve coefficients: {popt}")


main('kSATu.cnf.csv')
